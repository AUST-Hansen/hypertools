

.. _sphx_glr_auto_examples_plot_geo.py:


=============================
A DataGeometry object or "geo"
=============================

When the plot function is called, it returns a DataGeometry object, or geo. A
geo contains all the pieces needed to regenerate the plot. You can use the geo
plot method to evaluate the same plot with new arguments, like changing the color
of the points, or trying a different normalization method.  To save the plot,
simply call geo.save(fname), where fname is a file name/path.  Then, this file
can be reloaded using hyp.load to be plotted again at another time.  Finally,
the transform method can be used to transform new data using the same transformations
that were applied to the geo.




.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/andyheusser/Documents/github/hypertools/examples/plot_geo.py", line 30, in <module>
        geo.plot(color='green', normalize='across')
      File "/Users/andyheusser/Documents/github/hypertools/hypertools/datageometry.py", line 176, in plot
        return plotter(d, transform=transform, **new_kwargs)
      File "/Users/andyheusser/Documents/github/hypertools/hypertools/plot/plot.py", line 247, in plot
        align=align, internal=True)
      File "/Users/andyheusser/Documents/github/hypertools/hypertools/tools/analyze.py", line 54, in analyze
        reduce=reduce, ndims=ndims, internal=internal), align=align)
      File "/Users/andyheusser/Documents/github/hypertools/hypertools/_shared/helpers.py", line 165, in memoizer
        cache[key] = obj(*args, **kwargs)
      File "/Users/andyheusser/Documents/github/hypertools/hypertools/tools/reduce.py", line 145, in reduce
        model_params['n_components'] = ndims
    TypeError: 'NoneType' object does not support item assignment





.. code-block:: python


    # Code source: Andrew Heusser
    # License: MIT

    # import
    import hypertools as hyp

    # load some data
    geo = hyp.load('mushrooms')

    # plot
    geo.plot()

    # replot with new parameters
    geo.plot(color='green', normalize='across')

    # save the object
    # geo.save('test')

    # load it back in
    # geo = hyp.load('test.geo')

    # transform some new data
    # transformed_data = geo.transform(data)

    # transform some 'new' data and plot it
    # hyp.plot(transformed_data, '.')

    # get a copy of the data
    # geo.get_data()

    # get the formatted data
    # geo.get_formatted_data()

**Total running time of the script:** ( 0 minutes  0.000 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_geo.py <plot_geo.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_geo.ipynb <plot_geo.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
